/* CVS $Id: $ */
package com.epimorphics.registry.vocabs; 
import com.hp.hpl.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from src/main/vocabs/registry.ttl 
 * @author Auto-generated by schemagen on 22 Mar 2013 14:16 
 */
public class RegistryVocab {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://purl.org/linked-data/registry#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>The ontology's owl:versionInfo as a string</p> */
    public static final String VERSION_INFO = "0.2";
    
    /** <p>A register item which represents some form of delegation</p> */
    public static final Resource Delegated = m_model.createResource( "http://purl.org/linked-data/registry#Delegated" );
    
    /** <p>A register whose member contents are determined through delegation to a SPARQL 
     *  endpoint</p>
     */
    public static final Resource DelegatedRegister = m_model.createResource( "http://purl.org/linked-data/registry#DelegatedRegister" );
    
    /** <p>A reference to some internal or external Linked Data resource. The reg:reference 
     *  gives the URI of the resource being referenced. If a reg:sourceGraph value 
     *  is present then it is the URI for a named graph within the Registry containing 
     *  the properties of the referenced entity. If reg:entityVersion is present it 
     *  gives URI for the particular version:Version of the entity being referenced. 
     *  Normally only one of reg:sourceGraph and reg:entityVersion is needed since 
     *  versioned entities are normally stored in the default graph.</p>
     */
    public static final Resource EntityReference = m_model.createResource( "http://purl.org/linked-data/registry#EntityReference" );
    
    /** <p>A register item which forwards all requests to a remote register. Queries 
     *  which traverse the register hierarchy such as entity search will also be forwarded</p>
     */
    public static final Resource FederatedRegister = m_model.createResource( "http://purl.org/linked-data/registry#FederatedRegister" );
    
    /** <p>A register item which simply forwards all requests to the delegation target.</p> */
    public static final Resource NamespaceForward = m_model.createResource( "http://purl.org/linked-data/registry#NamespaceForward" );
    
    /** <p>Represents a collection of registered items, together with some associated 
     *  governance regime. If one or more licenses is stated then each license applies 
     *  to all the entries in the register.</p>
     */
    public static final Resource Register = m_model.createResource( "http://purl.org/linked-data/registry#Register" );
    
    /** <p>A metadata record for an entry in a register. Note that cardinality constraints 
     *  can be met by sub-properties, for example an item with a skos:prefLabel implies 
     *  an rdfs:label and so meets the cardinality constraint on rdfs:label.</p>
     */
    public static final Resource RegisterItem = m_model.createResource( "http://purl.org/linked-data/registry#RegisterItem" );
    
    /** <p>Represents a SPARQL ASK query as might be used for validation.</p> */
    public static final Resource SPARQLAskQuery = m_model.createResource( "http://purl.org/linked-data/registry#SPARQLAskQuery" );
    
    /** <p>Represents a SPARQL CONSTRUCT query.</p> */
    public static final Resource SPARQLConstructQuery = m_model.createResource( "http://purl.org/linked-data/registry#SPARQLConstructQuery" );
    
    /** <p>Represents a SPARQL query as a reusable resource.</p> */
    public static final Resource SPARQLQuery = m_model.createResource( "http://purl.org/linked-data/registry#SPARQLQuery" );
    
    /** <p>Represents a SPARQL SELECT query.</p> */
    public static final Resource SPARQLSelectQuery = m_model.createResource( "http://purl.org/linked-data/registry#SPARQLSelectQuery" );
    
    /** <p>Open set of status code for entries in a register</p> */
    public static final Resource Status = m_model.createResource( "http://purl.org/linked-data/registry#Status" );
    
    /** <p>Specifies a view available for a registered item</p> */
    public static final Resource View = m_model.createResource( "http://purl.org/linked-data/registry#View" );
    
    /** <p>Concept scheme containing registry status codes</p> */
    public static final Resource StatusScheme = m_model.createResource( "http://purl.org/linked-data/registry#StatusScheme" );
    
    /** <p>An entry that has been accepted for use and is visible in the default register 
     *  listing. Includes entries that have seen been retired or superseded.</p>
     */
    public static final Resource statusAccepted = m_model.createResource( "http://purl.org/linked-data/registry#statusAccepted" );
    
    /** <p>An entry that has been retired or replaced and is no longer to be used.</p> */
    public static final Resource statusDeprecated = m_model.createResource( "http://purl.org/linked-data/registry#statusDeprecated" );
    
    /** <p>An entry that has been accepted into the register temporarily and may be subject 
     *  to change or withdrawal.</p>
     */
    public static final Resource statusExperimental = m_model.createResource( "http://purl.org/linked-data/registry#statusExperimental" );
    
    /** <p>An entry which has been invalidated due to serious flaws, distinct from retrirement. 
     *  Corresponds to ISO 19135(redraft) 'invalid'</p>
     */
    public static final Resource statusInvalid = m_model.createResource( "http://purl.org/linked-data/registry#statusInvalid" );
    
    /** <p>An entry that should not be visible in the default register listing. Corresponds 
     *  to ISO 19135:2005 'notValid'</p>
     */
    public static final Resource statusNotAccepted = m_model.createResource( "http://purl.org/linked-data/registry#statusNotAccepted" );
    
    /** <p>An entry that has been withdrawn from use. Corresponds to ISO 19135:2005 'retired'</p> */
    public static final Resource statusRetired = m_model.createResource( "http://purl.org/linked-data/registry#statusRetired" );
    
    /** <p>An entry that is seen as having a reasonable measure of stability, may be 
     *  used to mark the full adoption of a previously 'experimental' entry.</p>
     */
    public static final Resource statusStable = m_model.createResource( "http://purl.org/linked-data/registry#statusStable" );
    
    /** <p>A proposed entry which is not yet approved for use for use. Corresponds to 
     *  ISO 19135:(redraft) 'submitted'</p>
     */
    public static final Resource statusSubmitted = m_model.createResource( "http://purl.org/linked-data/registry#statusSubmitted" );
    
    /** <p>An entry that has been replaced by a new alternative which should be used 
     *  instead. Corresponds to ISO 19135:2005 'superseded'.</p>
     */
    public static final Resource statusSuperseded = m_model.createResource( "http://purl.org/linked-data/registry#statusSuperseded" );
    
    /** <p>An entry that has been accepted into the register and is deemed fit for use. 
     *  Corresponds to ISO 19135:2005 'valid'.</p>
     */
    public static final Resource statusValid = m_model.createResource( "http://purl.org/linked-data/registry#statusValid" );
    
}
